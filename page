#!/usr/bin/env python3.6
import sys
import os
import argparse
import json
import re
import isbnlib
from datetime import date

# https://pypi.org/project/isbnlib/3.6.1/

today = date.today()
CURRENT_DATE = "{}{}{}".format(
    format(today.day, '02'), 
    format(today.month, '02'),
    str(today.year)[2:])

temp_name = "test.json"
DEBUG_MODE = True
MONTHS = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", 
          "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"]

# ========== Messages ==========
INFO_LIBRARY_404_MSG = "Saved library not found, creating new"
ERR_ID_404_MSG = "Book ID not found"
ERR_ID_NOT_404_MSG = "Book ID already exists"
ERR_NOT_404_MSG = "Book already exists with"
ERR_ARGLEN_MSG = "Too few arguments: ./page"
ERR_NOKEY_MSG = "Command not found"
ERR_LOG_TAKEN_MSG = "Log already exist for that date"
ERR_DATE_MSG = "Date must be in format ddmmyy, ex 260320"
#ERR_NOKEY_MSG = "Command not found: {}".format(sys.argv[1])

# ========== Read/Write ==========
def read_json():
  with open(temp_name, 'r') as f:
    return json.load(f)

def write_json(library):
  with open(temp_name, 'w') as f:
    json.dump(library, f, indent=4)

# =========== Utils ==============
def id_exists(book_id, library):
	for book in library['books']:
		if book_id == book['id']:
			return True
	return False

def check_date(date):
	if len(date) == 6 and date.isdigit():
		if int(date[:2]) > 0 and int(date[:2]) < 32:
			if int(date[2:-2]) > 0 and int(date[2:-2]) < 13:
				return date
	exit(ERR_DATE_MSG)	

def verify_isbn(isbn):
	isbn = isbn.replace("-", "")
	if len(isbn) == 10:
		if DEBUG_MODE:
			print("ISBN10:", isbnlib.is_isbn10(isbn))
		return isbnlib.is_isbn10(isbn)
	elif len(isbn) == 13:
		if DEBUG_MODE:
			print("ISBN13:", isbnlib.is_isbn13(isbn))
		return isbnlib.is_isbn13(isbn)
	else:
		return False

# ========== Functions ===========
def add_book(args, library):
	if DEBUG_MODE:
		print("add_book({})".format(args)) # args[id, isbn]

	isbn = ""
	isbn_provided = False
	book = {}

	if len(args) < 1:
		exit(ERR_ARGLEN_MSG + " <id> (<isbn>)")

	if len(args) > 1:
		isbn_provided = True

	for book in library['books']:
		if args[0] == book['id']:
			exit(ERR_NOT_404_MSG + " ID: " + str(args[0]))
		if isbn_provided:
			if args[1] == book['isbn']:
				exit(ERR_NOT_404_MSG + " ISBN: " + str(args[1]))

	if isbn_provided:
		isbn = args[1]

	if verify_isbn(isbn):
		book_item = isbnlib.meta(isbn)
		#print(json.dumps(book_item))
		book['title'] = book_item['Title']
		book['authors'] = book_item['Authors']
		book['publisher'] = book_item['Publisher']
		book['year'] = book_item['Year']
		book['language'] = book_item['Language']
	else:
		print("No ISBN found")
		if str(input("Add book manually? (Y/N) ")).lower() in ["yes", "y"]:
			book['title'] = str(input("Title: "))
			book['authors'] = list(str(input("Authors: ")).split(', '))
			book['publisher'] = str(input("Publisher: "))
			book['year'] = str(input("Year: "))
			book['language'] = str(input("Language: "))
		else:
			return library

	book['id'] = args[0]
	book['isbn'] = isbn
	book['status'] = "New"
	book['started'] = None
	book['finished'] = None
	book['log'] = {}
	library['books'].append(book)
	del book	
	return library

def remove_book(args, library):
	if DEBUG_MODE:
		print("remove_book({})".format(args)) # args[id]

	if len(args) < 1:
		exit(ERR_ARGLEN_MSG + " <id>")

	for book in library['books']:
		if args[0] == book['id']:
			library['books'].remove(book)

	return library

def list_books(args, library):
	if DEBUG_MODE:
		print("list_books({})".format(args)) # args[None]

	print("ID   Title")
	sorted_books = sorted(library['books'], key=lambda b: b['id'])
	for book in sorted_books:
		print("{}   {}".format(book['id'], book['title']))

	return library
 
def log_book(args, library):
	if DEBUG_MODE:
		print("log_book({})".format(args)) # args[id, page, date]

	if len(args) < 2:
		exit(ERR_ARGLEN_MSG + " <id> <page> (<date>)")
  
	date = CURRENT_DATE
	if len(args) > 2: # if date provided
		date = check_date(args[2])

	for book in library['books']:
		if args[0] == book['id']:
			if date in book['log'].keys():
				print(ERR_LOG_TAKEN_MSG)
				print("{}: {}".format(date, book['log'][date])) 
				if str(input("Overwrite? (Y/N) ")).lower() in ["yes", "y"]:
					book['status'] = "Reading"
					book['log'][date] = int(args[1])
			else:
				if not book['log']:	# first time log
					book['started'] = date
				book['status'] = "Reading"
				book['log'][date] = int(args[1])
			return library	

	exit(ERR_ID_404_MSG)

def finish_book(args, library):
	if DEBUG_MODE:
		print("finish_book({})".format(args)) # args[id, (date)] 

	if len(args) < 1:
		exit(ERR_ARGLEN_MSG + " <id> (<date>)")

	date = CURRENT_DATE
	if len(args) > 1: # if date provided
		date = check_date(args[1])

	for book in library['books']:
		if args[0] == book['id']:
			book['finished'] = date
			book['status'] = "Done"
			return library
	exit(ERR_ID_404_MSG)

# Test this method
def modify_book(args, library):
	if DEBUG_MODE:
		print("modify_book({})".format(args)) # args[id, key=value ...]
   
	if len(args) < 2:
		exit(ERR_ARGLEN_MSG + " <id> <key>=<value> (<key>=<value> ...)")

	for book in library['books']:
		if args[0] == book['id']:
			for pair in args[1:]:
				key = str(pair.split('=')[0])
				value = str(pair.split('=')[1])
				if key == 'id':
					# Check if ID already exist
					if id_exists(value, library):
						exit(ERR_ID_NOT_404_MSG)
					else:
						book['id'] = value
				elif key == 'started' or key == 'finished':
						# Needs to be a date
						book[key] = check_date(value)
				else:
					book[key] = value
	return library

def info_book(args, library):
	if DEBUG_MODE:
		print("info_book({})".format(args)) # args[id]
   
	if len(args) < 1:
		exit(ERR_ARGLEN_MSG + " id")

	for book in library['books']:
		if args[0] == book['id']:
			
			print("Book attributes for {}".format(args[0]))
			for key in book.keys():
				if key == 'authors':
					print("  {}: {}".format(key, ",".join(book[key])))
				elif key != 'log':
					print("  {}: {}".format(key, book[key]))
			
			print("Reading log for {}".format(args[0]))
			for date in book['log'].keys():
				print("  {}: {}".format(date, book['log'][date]))
			return library
						
	exit(ERR_ID_404_MSG)
	
   
def stats(args, library):
	if DEBUG_MODE:
		print("stats({})".format(args)) # args[id || month || year || None]
  
	if len(args) == 0:
		print("Lifetime")
		return library

	if args[0].upper()[:3] in MONTHS:
		print("Month {}".format(args[0].upper()[:3]))
		return library

	if len(args[0]) == 4 and args[0].isdigit():
		print("Year {}".format(args[0]))
		return library

	for book in library['books']:
		if args[0] == book['id']:
			print("Book {}".format(args[0]))
			return library
	
	print("{} is not a valid argument".format(args[0]))
	print("id || month || year || None")
	
	return library


def help_print(args, library):
	print("How to use page")
	print("Commands:\n")
	print("  page add <id> (<isbn>)")
	print("    Adds a book to the library with provided ID")
	print("    Optioanl to find book info with isbn\n")
	print("  page remove <id>")
	print("    Removes a book from the library with provided ID\n")
	print("  page list")
	print("    Lists all books in the library\n")
	print("  page log <id> <page_number> (<date>)")
	print("    Logs the current page of book with provided ID.")
	print("    Optional to add a date, default is current date\n")
	print("  page finish <id> (<date>)")
	print("    Marks the book with provided ID as finished")
	print("    Optional to add a date, default is current date\n")
	print("  page info <id>")
	print("    Prints stored information about the book with provided ID\n")
	print("  page modify <id> <key>=<value> (<key>=<value> ...)")
	print("    Modifies the book with provided ID and a key/value pair.")
	print("    Ex. page modify B1 title='new_title'\n")
	print("  page stats")
	print("    (Work in Progress)\n")

	return library

def main():
	library = {}
	library['books'] = []

	commands = {
		'add': add_book,
		'remove': remove_book,
		'list': list_books,
		'log': log_book,
		'finish': finish_book,
		'modify': modify_book,
		'info': info_book,
		'stats': stats,
		'help': help_print,
	}

	if len(sys.argv) < 2:
		exit(ERR_ARGLEN_MSG)
  
	if not sys.argv[1] in commands.keys():
		exit(ERR_NOKEY_MSG)

	try:
		library = read_json()
	except:
		print(INFO_LIBRARY_404_MSG)

	library = commands[sys.argv[1]](sys.argv[2:], library)
	write_json(library)

if __name__ == "__main__":
	main()
